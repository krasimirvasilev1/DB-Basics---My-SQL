1.

CREATE TABLE users(
id INT(11) PRIMARY KEY,
username VARCHAR(30) NOT NULL UNIQUE,
password VARCHAR(30) NOT NULL,
email VARCHAR(50)
);

CREATE TABLE categories(
id INT(11) PRIMARY KEY,
name VARCHAR(50) NOT NULL,
parent_id INT(11) NOT NULL,
CONSTRAINT fk_parent_id_id
FOREIGN KEY (parent_id)
REFERENCES categories(id) 
);

CREATE TABLE contests (
id INT(11) PRIMARY KEY,
name VARCHAR(50) NOT NULL,
category_id INT(11) NOT NULL,
CONSTRAINT fk_category_contest
FOREIGN KEY (category_id)
REFERENCES categories(id)
);

CREATE TABLE users_contests(
user_id INT(11) NOT NULL,
contest_id INT(11) NOT NULL,
CONSTRAINT pk_users_contests
PRIMARY KEY (user_id,contest_id),
CONSTRAINT fk_contests_users
FOREIGN KEY (user_id)
REFERENCES users(id),
CONSTRAINT fk_users_contests
FOREIGN KEY (contest_id)
REFERENCES contests(id)
);

CREATE TABLE problems(
id INT(11) PRIMARY KEY,
name VARCHAR(100) NOT NULL ,
points INT(11) NOT NULL,
tests INT(11) DEFAULT 0,
contest_id INT(11),
CONSTRAINT fk_problem_contest
FOREIGN KEY (contest_id)
REFERENCES contests(id)
);

CREATE TABLE submissions(
id INT(11) PRIMARY KEY,
passed_tests INT(11) NOT NULL,
problem_id INT(11),
user_id INT(11),
CONSTRAINT fk_problem_submission
FOREIGN KEY (problem_id)
REFERENCES problems(id),
CONSTRAINT fk_user_submission
FOREIGN KEY (user_id)
REFERENCES users(id)
);

2.

INSERT INTO submissions(passed_tests,problem_id,user_id)
SELECT
 	CEIL(SQRT(POWER(CHAR_LENGTH(p.name),3)) - CHAR_LENGTH(p.name)),
 	p.id,
 	CEIL((p.id * 3) / 2)
	FROM problems AS p
	WHERE p.id BETWEEN 1 AND 10;
	
3.

UPDATE problems AS p
JOIN contests AS co
ON p.contest_id = co.id
JOIN categories AS ca
ON co.category_id = ca.id
JOIN submissions AS s
ON s.problem_id = p.id
SET p.tests = 
CASE p.id % 3
	WHEN 0 THEN CHAR_LENGTH(ca.name)
	WHEN 1 THEN (SELECT SUM(s.id) FROM submissions AS s
	WHERE s.problem_id = p.id)
	WHEN 2 THEN CHAR_LENGTH(co.name)
END
WHERE p.tests = 0

4.

DELETE u FROM users AS u
WHERE u.id NOT IN (SELECT DISTINCT user_id FROM users_contests)

5.

SELECT id,username,email FROM users
ORDER BY id;

6.

SELECT c.id,c.name FROM categories AS c
WHERE c.parent_id NOT IN (SELECT id FROM categories) OR c.parent_id IS NULL
ORDER BY c.id

7.

SELECT p.id,p.name,p.tests FROM problems AS p
WHERE p.tests > p.points AND p.name REGEXP '[a-zA-Z]+ [a-zA-Z]+'
ORDER BY p.id DESC

8.

SELECT p.id,CONCAT_WS(' - ',ca.name,co.name,p.name) AS `full_path` FROM problems AS p
JOIN contests AS co
ON co.id = p.contest_id
JOIN categories AS ca
ON ca.id = co.category_id
ORDER BY p.id

9.

SELECT c.id,c.name FROM categories AS c
LEFT JOIN categories AS ca
ON c.id = ca.parent_id
WHERE ca.id IS NULL
ORDER BY c.name,c.id

10.

SELECT DISTINCT u.id,u.username,u.password FROM users AS u
JOIN users as ua
ON u.password = ua.password
WHERE u.id != ua.id
ORDER BY u.username,u.id

11.

SELECT `orderedDesc`.`id` AS `id`,`orderedDesc`.`name`,`orderedDesc`.`count` AS `count` FROM (SELECT c.id AS `id`,c.name AS `name`,COUNT(uc.user_id) AS `count` FROM contests AS c
LEFT JOIN users_contests AS uc
ON c.id = uc.contest_id
GROUP BY uc.contest_id
ORDER BY `count` DESC,c.id
LIMIT 5) AS `orderedDesc`
ORDER BY `count`,`id`

12.

SELECT s.id,u.username,p.name,CONCAT_WS(' / ',s.passed_tests,p.tests) FROM submissions AS s
JOIN users AS u
ON s.user_id = u.id
JOIN problems AS p
ON s.problem_id = p.id
WHERE u.id = (SELECT `sol`.`id` FROM
(SELECT uc.user_id AS `id`,COUNT(uc.contest_id) AS `count` FROM users_contests AS uc
GROUP BY uc.user_id
ORDER BY `count` DESC
LIMIT 1) AS `sol`)
ORDER BY s.id DESC

14.

SELECT c.id,c.name,COUNT(p.id) AS `count` FROM contests AS c
JOIN problems AS p
ON c.id = p.contest_id
JOIN submissions AS s
ON p.id = s.problem_id
JOIN users_contests AS uc
ON s.user_id = uc.user_id
WHERE p.contest_id = uc.contest_id
GROUP BY p.contest_id
ORDER BY `count` DESC, c.id

15.

CREATE PROCEDURE udp_login(username VARCHAR(30),password VARCHAR(30))
BEGIN
	IF username NOT IN (SELECT u.username FROM users AS u)
	THEN 
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Username does not exist!';
	ELSEIF password != (SELECT u.password FROM users AS u WHERE username = u.username)
	THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Password is incorrect!';
	ELSEIF username IN (SELECT l.username FROM logged_in_users AS l)
	THEN 
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'User is already logged in!';
	ELSE
	INSERT INTO logged_in_users(id,username,password,email)
	SELECT id,username,password,email FROM users AS u
	WHERE username = u.username;
	END IF;
END

16.

CREATE PROCEDURE udp_evaluate(id INT(11))
BEGIN
	IF id NOT IN (SELECT id FROM submissions)
	THEN SIGNAL SQLSTATE '45000'
	SET MESSAGE_TEXT = 'Submission does not exist!';
	ELSE
	INSERT INTO evaluated_submissions (id,problem,user,result)
	SELECT s.id,p.name,u.username,CEIL(p.points / p.tests * s.passed_tests) AS `result` FROM submissions AS s
	JOIN users AS u
	ON s.user_id = u.id
	JOIN problems AS p
	ON s.problem_id = p.id
	WHERE id = s.id;
	END IF;
END 