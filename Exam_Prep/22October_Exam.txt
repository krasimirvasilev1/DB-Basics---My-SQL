1.

CREATE TABLE departments(
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL
);

CREATE TABLE employees(
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(25),
last_name VARCHAR(25),
gender VARCHAR(1) NOT NULL,
birthdate DATETIME,
age INT(11) UNSIGNED,
department_id INT(11) UNSIGNED NOT NULL,
CONSTRAINT fk_employee_department
FOREIGN KEY (department_id)
REFERENCES departments(id)
);

CREATE TABLE categories(
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL,
department_id INT(11) UNSIGNED NOT NULL,
CONSTRAINT fk_categories_department
FOREIGN KEY (department_id)
REFERENCES departments(id)
);

CREATE TABLE status (
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
label VARCHAR(30) NOT NULL
);

CREATE TABLE users(
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
username VARCHAR(30) UNIQUE NOT NULL,
`password` VARCHAR(50) NOT NULL,
`name` VARCHAR(50),
gender VARCHAR(1) NOT NULL,
birthdate DATE,
age INT(11) UNSIGNED,
email VARCHAR(50) NOT NULL
);

CREATE TABLE reports(
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
category_id INT(11) UNSIGNED NOT NULL,
status_id INT(11) UNSIGNED NOT NULL,
open_date DATE,
close_date DATE,
description VARCHAR(200),
user_id INT(11) UNSIGNED NOT NULL,
employee_id INT(11) UNSIGNED NOT NULL,
CONSTRAINT fk_category_report
FOREIGN KEY (category_id)
REFERENCES categories(id),
CONSTRAINT fk_status_report
FOREIGN KEY (status_id)
REFERENCES status(id),
CONSTRAINT fk_user_report
FOREIGN KEY (user_id)
REFERENCES users(id),
CONSTRAINT fk_employee_report
FOREIGN KEY (employee_id)
REFERENCES employees(id)
);

2.

INSERT INTO employees(first_name,last_name,gender,birthdate,department_id)
VALUES ('Marlo','O\'Malley','M','1958-09-21',1),('Niki','Stanaghan','F','1969-11-26',4),('Ayrthon','Senna','M','1960-03-21',9),('Ronnie','Peterson','M','1944-02-14',9),('Giovanna','Amati','F','1959-07-20',5);

INSERT INTO reports (category_id,status_id,open_date,close_date,description,user_id,employee_id)
VALUES(1,1,'2017-04-13',NULL,'Stuck Road on Str.133',6,2),(6,3,'2015-09-05','2015-12-06','Charity trail running',3,5),(14,2,'2015-09-07',NULL,'Falling bricks on Str.58',5,2),(4,3,'2017-07-03','2017-07-06','Cut off streetlight on Str.11',1,1);

3.

UPDATE reports AS r
SET r.status_id = 2
WHERE r.status_id = 1 AND r.category_id = 4;

4.

DELETE FROM reports
WHERE status_id = 4;

5.

SELECT u.username,u.age FROM users as u
ORDER BY u.age,u.username DESC

6.

SELECT r.description,r.open_date FROM reports AS r
WHERE r.employee_id IS NULL
ORDER BY r.open_date,r.description

7.

SELECT e.first_name,e.last_name,r.description,DATE_FORMAT(r.open_date,'%Y-%m-%d') FROM employees AS e
JOIN reports AS r
ON e.id = r.employee_id
ORDER BY e.id,r.open_date,r.id

8.

SELECT c.name,COUNT(r.category_id) AS `reports_number` FROM categories AS c
JOIN reports AS r
ON c.id = r.category_id
GROUP BY r.category_id
ORDER BY `reports_number`,c.name

9.

SELECT c.name,COUNT(r.category_id) FROM categories AS c
JOIN reports AS r
ON c.id = r.category_id
GROUP BY r.category_id
ORDER BY c.name

10.

SELECT DISTINCT c.name FROM categories AS c
JOIN reports AS r
ON c.id = r.category_id
JOIN users AS u
ON u.id = r.user_id
WHERE MONTH(u.birthdate) = MONTH(r.open_date)
AND DAY(u.birthdate) = DAY(r.open_date)
ORDER BY c.name

11.

SELECT CONCAT(e.first_name,' ',e.last_name) AS `name`,COUNT(DISTINCT r.user_id) AS `users_count` FROM employees AS e 
LEFT JOIN reports AS r
ON e.id = r.employee_id
GROUP BY e.id
ORDER BY `users_count` DESC,`name`

12.

SELECT r.open_date,r.description,u.email AS `email` FROM reports AS r
JOIN users AS u
ON u.id = r.user_id
JOIN employees AS e
ON e.id = r.employee_id
WHERE r.close_date IS NULL AND
CHAR_LENGTH(r.description) > 20 AND r.description LIKE '%str%'
AND e.department_id IN (1,4,5)
ORDER BY r.open_date,`email`,r.id

13.

SELECT u.username FROM users AS u
JOIN reports AS r
ON u.id = r.user_id
WHERE r.category_id = LEFT(u.username,1) OR 
r.category_id = RIGHT(u.username,1)
ORDER BY u.username

15.

SELECT d.name,
CASE 
WHEN AVG(TIMESTAMPDIFF(DAY,r.open_date,r.close_date)) IS NULL THEN 'no info'
ELSE FLOOR(AVG(TIMESTAMPDIFF(DAY,r.open_date,r.close_date)))
END
FROM departments AS d
JOIN categories AS c
ON c.department_id = d.id
LEFT JOIN reports AS r
ON r.category_id = c.id
GROUP BY d.name
ORDER BY d.name
